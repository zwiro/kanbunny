// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Project {
  id            String  @id @default(cuid())
  owner         User    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId       String
  boards        Board[]
  users         User[]  @relation("ProjectUsers")
  invited_users User[]  @relation("ProjectInvites")

  @@index([ownerId])
}

model Board {
  id         String   @id @default(cuid())
  name       String
  projectId  String
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  lists      List[]
  created_at DateTime @default(now())
  color      String

  @@index([projectId])
}

model List {
  id         String   @id @default(cuid())
  name       String
  boardId    String
  board      Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks      Task[]
  created_at DateTime @default(now())
  color      String

  @@index([boardId])
}

model Task {
  id          String    @id @default(cuid())
  name        String
  listId      String
  list        List      @relation(fields: [listId], references: [id], onDelete: Cascade)
  created_at  DateTime  @default(now())
  assigned_to User[]
  due_to      DateTime?

  @@index([listId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  projects_owned Project[]
  projects_in    Project[] @relation("ProjectUsers")
  invites        Project[] @relation("ProjectInvites")
  tasks          Task[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
